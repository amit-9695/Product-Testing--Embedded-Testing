{"uid":"61cfb63a2aa48bbf","name":"test_request_quotation_validation","fullName":"tests.test_request_quotation.TestRequestQuotation#test_request_quotation_validation","historyId":"a0d0ab627417d73e56d6a21a603b2e26","time":{"start":1756882311326,"stop":1756882318865,"duration":7539},"status":"failed","statusMessage":"AssertionError: Error message “Invalid data entered” should displayed\nassert (True and True == False)\n +  where True = confirmation_present()\n +    where confirmation_present = <pages.request_quotation_page.RequestQuotationPage object at 0x0000012CBD54F210>.confirmation_present\n +  and   True = quotation_number()\n +    where quotation_number = <pages.request_quotation_page.RequestQuotationPage object at 0x0000012CBD54F210>.quotation_number","statusTrace":"self = <test_request_quotation.TestRequestQuotation object at 0x0000012CBD588050>\n\n    def test_request_quotation_validation(self):\n        self.driver.get(\"https://demo.guru99.com/insurance/v1/index.php\")\n        lp = LoginPage(self.driver)\n        lp.login(\"amit@gmail.com\", 'Amit@123')\n        db = DashboardPage(self.driver)\n        db.go_request_quotation()\n        rq = RequestQuotationPage(self.driver)\n        # Enter invalid negative value\n        rq.remove_enter_text(rq.VALUE, \"-100\")\n        sleep(2)\n        rq.save()\n        sleep(2)\n        # Expect some validation/notice to appear\n>       assert rq.confirmation_present() and rq.quotation_number() == False, \"Error message “Invalid data entered” should displayed\"\nE       AssertionError: Error message “Invalid data entered” should displayed\nE       assert (True and True == False)\nE        +  where True = confirmation_present()\nE        +    where confirmation_present = <pages.request_quotation_page.RequestQuotationPage object at 0x0000012CBD54F210>.confirmation_present\nE        +  and   True = quotation_number()\nE        +    where quotation_number = <pages.request_quotation_page.RequestQuotationPage object at 0x0000012CBD54F210>.quotation_number\n\ntest_request_quotation.py:55: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1756882280226,"stop":1756882285910,"duration":5684},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"afterStages":[{"name":"setup::0","time":{"start":1756882318871,"stop":1756882321294,"duration":2423},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_request_quotation"},{"name":"subSuite","value":"TestRequestQuotation"},{"name":"host","value":"LAPTOP-HV9SGCO3"},{"name":"thread","value":"19432-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_request_quotation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"61cfb63a2aa48bbf.json","parameterValues":[]}