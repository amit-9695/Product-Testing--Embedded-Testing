{"uid":"6669701d2ceebd09","name":"test_login_empty_credentials","fullName":"tests.test_login.TestLogin#test_login_empty_credentials","historyId":"3267abf04e306be4f18ca8bec40f02e4","time":{"start":1756882170709,"stop":1756882192211,"duration":21502},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff637d7e795+22117]\n\t(No symbol) [0x0x7ff637ccee10]\n\tGetHandleVerifier [0x0x7ff638004c3c+2669324]\n\t(No symbol) [0x0x7ff637ae928b]\n\t(No symbol) [0x0x7ff637ae957b]\n\t(No symbol) [0x0x7ff637b29b47]\n\t(No symbol) [0x0x7ff637b0a82f]\n\t(No symbol) [0x0x7ff637adf68d]\n\t(No symbol) [0x0x7ff637b2762f]\n\t(No symbol) [0x0x7ff637b0a553]\n\t(No symbol) [0x0x7ff637adeb86]\n\t(No symbol) [0x0x7ff637adde11]\n\t(No symbol) [0x0x7ff637ade9b3]\n\t(No symbol) [0x0x7ff637bd907d]\n\t(No symbol) [0x0x7ff637be5fe8]\n\tGetHandleVerifier [0x0x7ff637e5f287+942423]\n\tGetHandleVerifier [0x0x7ff637e68231+979201]\n\t(No symbol) [0x0x7ff637cdc3c1]\n\t(No symbol) [0x0x7ff637cd4d74]\n\t(No symbol) [0x0x7ff637cd4ec3]\n\t(No symbol) [0x0x7ff637cc7026]\n\tBaseThreadInitThunk [0x0x7ffc66ade8d7+23]\n\tRtlUserThreadStart [0x0x7ffc68be8d9c+44]","statusTrace":"self = <test_login.TestLogin object at 0x0000012CBD555C10>\n\n    def test_login_empty_credentials(self):\n        lp = LoginPage(self.driver)\n        lp = LoginPage(self.driver)\n        lp.login(\"\",\"\" )\n        # current_url = self.driver.current_url\n        # assert current_url != \"https://demo.guru99.com/insurance/v1/header.php\", 'Expected error message for empty login.'\n>       assert lp.error_message_present(), \"Expected error message for empty login is not displayed\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_login.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\login.py:16: in error_message_present\n    return self.find_web_element(self.ERROR).text\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\base\\base_page.py:15: in find_web_element\n    return self.wait.until(EC.visibility_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"23d64daf7e71c4abe4136fe1b566917f\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000012CBD54ADE0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff637d7e795+22117]\nE       \t(No symbol) [0x0x7ff637ccee10]\nE       \tGetHandleVerifier [0x0x7ff638004c3c+2669324]\nE       \t(No symbol) [0x0x7ff637ae928b]\nE       \t(No symbol) [0x0x7ff637ae957b]\nE       \t(No symbol) [0x0x7ff637b29b47]\nE       \t(No symbol) [0x0x7ff637b0a82f]\nE       \t(No symbol) [0x0x7ff637adf68d]\nE       \t(No symbol) [0x0x7ff637b2762f]\nE       \t(No symbol) [0x0x7ff637b0a553]\nE       \t(No symbol) [0x0x7ff637adeb86]\nE       \t(No symbol) [0x0x7ff637adde11]\nE       \t(No symbol) [0x0x7ff637ade9b3]\nE       \t(No symbol) [0x0x7ff637bd907d]\nE       \t(No symbol) [0x0x7ff637be5fe8]\nE       \tGetHandleVerifier [0x0x7ff637e5f287+942423]\nE       \tGetHandleVerifier [0x0x7ff637e68231+979201]\nE       \t(No symbol) [0x0x7ff637cdc3c1]\nE       \t(No symbol) [0x0x7ff637cd4d74]\nE       \t(No symbol) [0x0x7ff637cd4ec3]\nE       \t(No symbol) [0x0x7ff637cc7026]\nE       \tBaseThreadInitThunk [0x0x7ffc66ade8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffc68be8d9c+44]\n\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1756882160649,"stop":1756882164312,"duration":3663},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"afterStages":[{"name":"setup::0","time":{"start":1756882192329,"stop":1756882194635,"duration":2306},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"LAPTOP-HV9SGCO3"},{"name":"thread","value":"19432-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"6669701d2ceebd09.json","parameterValues":[]}